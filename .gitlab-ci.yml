# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
  - test
  - scan
  - build

image: docker:latest
services:
  - docker:dind

element-web:
  stage: build
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - if [ -z "$CI_COMMIT_TAG" ]; then CI_COMMIT_TAG=$CI_COMMIT_SHORT_SHA; fi
    - |
      docker build -f ./projects/element-web/Dockerfile \
      --pull \
      --debug \
      --progress=plain \
      --build-arg CICDVERSION=$CI_COMMIT_TAG \
      -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"

variables:
  DOCKER_DRIVER: overlay2
  TRIVY_NO_PROGRESS: "true"
  TRIVY_SEVERITY: "HIGH,CRITICAL"
  PROJECT_PATH: "./projects"

# ========= IMAGE SCAN ==========
trivy-image-scan:
  stage: scan
  allow_failure: false
  before_script:
    - export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - echo $TRIVY_VERSION
    - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
    # Login to Docker registry using GitLab credentials
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - if [ -z "$CI_COMMIT_TAG" ]; then CI_COMMIT_TAG=$CI_COMMIT_SHORT_SHA; fi
    - IMAGE="$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"
    #- echo "Scanning image: $IMAGE"
    # Vulnerability scan -> breaks pipeline if HIGH/CRITICAL
    - ./trivy image --exit-code 0 --scanners vuln --severity $TRIVY_SEVERITY --format template --template "@contrib/gitlab.tpl" -o trivy-image-vuln.json $IMAGE
    - ./trivy image --exit-code 1 --scanners vuln --severity $TRIVY_SEVERITY --format table $IMAGE
    # Other scans -> just report
    - ./trivy image --exit-code 0 --scanners misconfig --format table $IMAGE
    - ./trivy image --exit-code 0 --scanners license --format table $IMAGE
    - ./trivy image --exit-code 0 --scanners secret --format table $IMAGE
  artifacts:
    when: always
    paths:
      - trivy-image-*.json
    expire_in: 1h

# ========= FILESYSTEM SCAN ==========
trivy-fs-scan:
  stage: scan
  allow_failure: false
  parallel:
    matrix:
      - component: [element-desktop, element-web]
  before_script:
    - export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - echo $TRIVY_VERSION
    - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
  script:
    - echo "Scanning local project"
    - PATH="${PROJECT_PATH}/${component}"
    - ./trivy fs --exit-code 0 --scanners vuln --severity $TRIVY_SEVERITY --format template --template "@contrib/gitlab.tpl" -o trivy-fs-vuln.json $PATH
    - ./trivy fs --exit-code 1 --scanners vuln --severity $TRIVY_SEVERITY --format table $PATH
    - ./trivy fs --exit-code 0 --scanners misconfig --format table $PATH
    - ./trivy fs --exit-code 0 --scanners license --format table $PATH
    - ./trivy fs --exit-code 0 --scanners secret --format table $PATH
  artifacts:
    when: always
    paths:
      - trivy-fs-*.json
    expire_in: 1h

# ========= REPO SCAN ==========
trivy-repo-scan:
  stage: scan
  allow_failure: false
  parallel:
    matrix:
      - component: [element-desktop, element-web]
  before_script:
    - export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - echo $TRIVY_VERSION
    - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
    - apk add --no-cache python3 py3-pip patch
    - python3 -m venv .venv
    - . .venv/bin/activate
    - pip3 install --no-cache-dir -r cli/requirements.txt
  script:
    - echo "Scanning remote repo"
    - python3 make.py init ${component}
    - REPO_PATH="${PROJECT_PATH}/${component}/local"
    - ./trivy repo --exit-code 0 --scanners vuln --severity $TRIVY_SEVERITY --format template --template "@contrib/gitlab.tpl" -o trivy-repo-vuln.json $REPO_PATH
    - ./trivy repo --exit-code 1 --scanners vuln --severity $TRIVY_SEVERITY --format table $REPO_PATH
    - ./trivy repo --exit-code 0 --scanners misconfig --format table $REPO_PATH
    - ./trivy repo --exit-code 0 --scanners license --format table $REPO_PATH
    - ./trivy repo --exit-code 0 --scanners secret --format table $REPO_PATH
  artifacts:
    when: always
    paths:
      - trivy-repo-*.json
    expire_in: 1h

# ========= CONFIG SCAN ==========
trivy-config-scan:
  stage: scan
  allow_failure: false
  before_script:
    - export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - echo $TRIVY_VERSION
    - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
  script:
    - echo "Scanning Dockerfile"
    - PATH="${PROJECT_PATH}/element-web/Dockerfile"
    - ./trivy config --exit-code 0 --severity $TRIVY_SEVERITY --format template --template "@contrib/gitlab.tpl" -o trivy-config-vuln.json $PATH
    - ./trivy config --exit-code 1 --severity $TRIVY_SEVERITY --format table $PATH
  artifacts:
    when: always
    paths:
      - trivy-config-*.json
    expire_in: 1h

include:
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
